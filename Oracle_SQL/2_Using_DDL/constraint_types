***** TYPES of CONSTRAINTS *****

----- NOT NULL -----

NULL - 'absence of information', 'unknown'
Columns with NOT NULL constraint must always be provided with a value.
By default, columns are allowed NULL values.
If PRIMARY KEY constraint is added, no need to add NOT NULL constraint.

----- UNIQUE -----

Ensured that any data added to the column in the future will be unique when compared to data already existing in the column.
- Can be applied to one column
- Can be applied to multiple columns (composite UNIQUE constraint) - requires combination of the column to be unique,
  each individual column may repeat data.
- Allows NULL values to be added to the column.
- Cannot include any columns with a datatype of BLOB, CLOB. or TIMESTAMP WITH TIME ZONE  
 (but can be TIMESTAP WITH LOCAL TIME ZONE)

----- PRIMARY KEY -----

Defines one or more columns as unique identifier for each row of data that is added to the table.
It is combination on UNIQUE and NOT NULL.
Table can have only one PK.
Composite PK constraint requires the combination of column values collectively have to be unique, and all column have values.
Cannot include any columns with a datatype of BLOB, CLOB. or TIMESTAMP WITH TIME ZONE  (but can be TIMESTAP WITH LOCAL TIME ZONE)

CREATE TABLE helpDesk (
  HD_category     VARCHAR2(8),
  HD_year         NUMBER,
  HD_ticket       NUMBER,
  HD_title        VARCHAR(30),
  CONSTRAINT      helpdesk_pk PRIMARY KEY(HD_category, HD_year, HD_ticket)  # composite PK
);

----- FOREIGN KEY -----

Applies to one or more columns in a particular table and works in conjunction with a referred table's PK.
(Referential integrity PK of parent table and FK of child table)
Cannot include any columns with a datatype of BLOB, CLOB. or TIMESTAMP WITH TIME ZONE  (but can be TIMESTAP WITH LOCAL TIME ZONE

- Identifies 1+ column(s) in a 'child' table
- For each of these columns identifies 1+ corresponding columns in 'parent' table
- Ensures that the parent table has PK or UNIQUE constraint on those corresponding columns
- Ensures that any future values added to the FK-constrained columns of the child table are already stored in parent table.

CREATE TABLE ports(
  port_id    NUMBER,
  port_name  VARCHAR2(20),
  country    VARCHAR2(40),
  capacity   NUMBER,
  CONSTRAINT port_pk PRIMARY KEY (port_id)  # if not specified as PK or UNIQUE --> ships will result in error
);
CREATE TABLE ships(
  ship_id    NUMBER,
  ship_name   VARCHAR(20),
  home_port_id  NUMBER NOT NULL,      # NOT NULL can be added if required
  CONSTRAINT ships_port_fk FOREIGN KEY(home_port_id) REFERENCES ports(port_id)

NOTE: often it is easier to add FK constraints with ALTER TABLE when all the tables are created.
You cannot add FK during CTAS - Create Table As Select)
);
  
----- ON DELETE clause -----
  
PK/FK relationship ==> when we remove  a row from a parent table, what should be done with a related row in a child table?

CREATE TABLE ships(
  ship_id    NUMBER,
  ship_name   VARCHAR(20),
  home_port_id  NUMBER,         # we do not specify NOT NULL here as we specify it to be null on delete
  CONSTRAINT ships_port_fk FOREIGN KEY(home_port_id) 
                           REFERENCES ports(port_id)
                           ON DELETE SET NULL
);

or to remove completly: DELETE CASCADE - removes all AHIP rows assigned to a PORT row upon the PORT row's 
                                         removal from the PORT table.

CREATE TABLE ships(
  ship_id    NUMBER,
  ship_name   VARCHAR(20),
  home_port_id  NUMBER,        
  CONSTRAINT ships_port_pk FOREIGN KEY(home_port_id) 
                           REFERENCES ports(port_id)
                           ON DELETE CASCADE
);

----- CHECK constraint -----

- applies a small business bit of code to define a particular business rule on incoming rows of data
- cannot use references to columns in other tables (other columns in the same table are accepted)
- cannot use pseudocolumns CURRVAL, NEXTVAL, LEVEL, or ROWNUM
- cannot use subqueries and scalar subquery expressions
- cannot use user-defined functions
- cannot use certain functions whose value cannot be known at the time of the call (SYSDATE, SYSTEMSTAMP,
  CURRENT_DATE, CURRENT_TIMESTAMP, DBTIMEZONE, LOCALTIMESTAMO, SESSIONTIMEZONE,UID, USER, and USERENV)
- CHECK constraint nust evaluate to either TRUE or unknown, due to a NULL

Example = allow status to be only 4 or 5

CREATE TABLE vendors (
  vendor_id      NUMBER,
  vendor_name    VARCHAR2(20),
  status         NUMBER(1) CHECK (status IN (4, 5)),
  category       VARCHAR2(5) CHECK (category IN ('Active', 'Suspended', 'Inactive'))
);
