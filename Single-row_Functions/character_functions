CHARACTER  functions - mostly to perform the sort of data processing typically associated with text manipulation.

UPPER(str1) - to upper case
LOWER(str2) - to lower case
Note: convert and then can compare (WHERE LOWER(last_name) = LOWER(family_name)  to avoid case mismatch

INITCAP(str1) - first letter of each word is capitalized
      SELECT INITCAP('napaleon'),                 # Napaleon
             INITCAP('RED O''BRIEN).              # Red O'Bried
             INITCAP('McDonals''s')               # Mcdonals'S
      FROM DUAL;

CONCAT and ||  
  CONCAT(str1, str2)  - takes 2 parameters
  str1 || str2  - can be repeated needed number of times
      SELECT CONCAT('Hello, ', 'World) FROM DUAL;
      SELECT 'Hello, ' || 'World' FROM DUAL;

LPAD(str1, n, str2) - str1, n - required, str2 - optional, if omitted - default value (single blank space)
RPAD(str1, n, str2)
      SELECT RPAD('Chapter One - I Am Born", 40, '.') FROM DUAL;  # Chapter One - I Am Born......................  (40 characters in total)

LTRIM(str1, str2) - str1 - required , str2 - optinal, if omitted - default value (a single blank space)
RTRIM(str1, str2) - removes occurences of the str2 characters from str1 string (from left or right)
  Ideal for stripping out unnecessary blanks, periods, ellipses, so on.

  SELECT RTRIM('Seven thousand-----------------', '-') FROM DUAL;   # Seven thousand

TRIM(trim_info trim_char FROM trim_source)
  trim_info: LEADING, TRAILING, BOTH - if ommithed (default)
  trim_char - a single character to be trimmed (if omitted - blank)
  tirm_source - source string (if omitted, TRIM returns NULL)

  SELECT TRIM(TRAILING '-' FROM 'Seven thousand-----------------') FROM DUAL; # Seven thousand

LENGTH(str1) - identifies the length of a given string

INSTR(s1, s2, pos, n) 
    s1 - source string, required
    s2 - substring, required
    pos - starting position in s1 to start looking for occurences of s2, optional, defaul 1. If negative - starts at the end of s1 and moves backward
    n - occurence of s2 to locate, optional, default 1 

    SELECT INSTR('Mississippi', 'is' 1, 2) FROM DUAL;   # 5 -- second occurence of 'is' starts at the fifth character

SUBSTR(s, pos, len) - extracts substring from s starting from pos
    s - required
    pos - number, required; if negative - starts at the end of the string and moves backward
    len - number, optional, if omitted - to the end of s

    SELECT SUBSTR('Name: MARK KENNEDY', 7) FROM DUAL;  # MARK KENNEDY

SOUNDEX(s) - s - source string, required - translates a source string into its SOUNDEX code (translated English words into sound-alike patterns)
  Rules:
  1 letter - no changes
  B, F, P, V              - 1
  C, G, J, K, Q, S, X, Z  - 2
  D, T                    - 3
  L                       - 4
  M, N                    - 5
  R                       - 6
  All other (A,E,H,I,O,U,W,Y) - ignored
  Translation os performed for each letter until three digits are generated

  SELECT SOUNDEX('Worthington'), SOUNDEX('Worthen') FROM DUAL;       # both W625




