SYSDATE - no parameters, returns the current date and time according to the operating systme on which Oracle DB is installed.
          time does not display by default; can be extracted with TO_CHAR cunctions

          SELECT SYSDATE FROM DUAL;     #1`-APR-25

ROUND(d, i) - d - date, required
              i - format model, optional; rounds up (before 12 - same date noon, after 12 pm - next day)
                  if i is omitted - d is rounded to the nearest whole date
              d is rounded off to the nearest date value at a level of detail specified by i (ex., nearest day, hour, year, etc.)
              12 noon and later - rounds up to the next day
    SELECT SYSDATE TODAY,                            # 03-DEC-15
            ROUND(SYSDATE, 'MM') rounded_month,      # 01-DEC-15
            ROUND(SYSDATE, 'RR') rounded_year        #01-JAN-16
    FROM DUAL;

    SELECT TO_CHAR(SYSDATE, 'DD-MON-YY HH:MI:SS') AS raw_date,              # 03-DEC-16 05:35:17
            TO_CHAR(ROUND(SYSDATE, 'DD-MON-YY HH:MI:SS')) AS rounded_date   # 03-DEC-16 12:00:00   - round up
    FROM DUAL;

TRUNC(d, i)  - d - date, required
               i - format model, optional;
               performs as ROUND, but rounds down
    SELECT SYSDATE TODAY,                              # 03-DEC-15
            TRUNC(SYSDATE, 'MM') truncated_month,      # 01-DEC-15
            TRUNC(SYSDATE, 'RR') truncated_year        # 01-DEC-15
    FROM DUAL;

NEXT_DAY(d, c) - d - date, required; c - reference to a day of the week, required
  SELECT NEXT_DAY('31-MAY-19', 'Saturday') FROM DUAL;    # 01-JUN-19 - first occurence of Saturday after May 31

LAST_DAY(d) - d - date, required; returns the last day of the month in which d falls
  SELECT LAST_DAY('14-FEB-20') FROM DUAL;    # 29-FEB-20 - last day of February 2020 

ADD_MONTHS(d, n) -  d - date, required; n - whole number, required; Adds n months to d
  SELECT ADD_MONTHS('31-JAN-17', 1),          # 28-FEB-17
         ADD_MONTHS('01-NOV-17', 4)           # 01-MAR-18
  FROM DUAL;
Note: to subtract months use negative n

MONTHS_BETWEEN(d1, d2) -  d1, d2 - dates, required; Determines number of months between two dates
                          when d1 is later than d2 - positive number
  
  SELECT MONTHS_BETWEEN('01-JAN-17', '01-FEB-17),          # -1
         MONTHS_BETWEEN('10-AUG-17', '10-JUL-17')          # 1  
  FROM DUAL;
  
NUMTOYMINTEVAL(n, interval_unit) - n - number, required, 
                                   interval_unit - 'YEAR' or 'MONTH'
                                  Converts date information in numeric form into an interval value of time
  SELECT NUMSTOYMINTERVAL(27, 'MONTH') FROM DUAL;    # 2-3    --> 2 years 3 months


NUMTODSNTEVAL(n, interval_unit) - n - number, required, 
                                   interval_unit - 'DAY', 'HOUR', 'MINUTE' or 'SECOND'
                                  Converts date information in numeric form into an interval value of time
  SELECT NUMSTODSINTERVAL(36, 'HOUR') FROM DUAL;    # 1 12:0:0:0.0    --> 1 day 12 hours

DATES and NUMBER Constancts
    SELECT TO_CHAR(SYSDATE, 'DD-MON-YY HH:MI:SS')         AS  today,
           TO_CHAR(SYSDATE+1, 'DD-MON-YY HH:MI:SS')       AS tomorrow,                   # number 1 - one day
           TO_CHAR(SYSDATE+1/24, 'DD-MON-YY HH:MI:SS')    AS one_hour_from_now,          # 1/24 - one hour
           TO_CHAR(SYSDATE+1/1440, 'DD-MON-YY HH:MI:SS' ) AS one_min_from_now            # 1/1440 - one minute (24 * 60)
    FROM DUAL;
    Note: same result with SYSTEMtIMESTAMP

                        
